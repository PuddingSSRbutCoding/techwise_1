// lib/subject/computertech_page.dart
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:async';
import 'package:techwisever1/main_screen.dart'; // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏≤‡∏Å‡∏ó‡∏µ‡πà MainScreen ‡πÄ‡∏™‡∏°‡∏≠
import 'package:techwisever1/services/app_nav.dart';
import 'package:techwisever1/services/progress_service.dart';
import 'package:techwisever1/services/loading_utils.dart';
import 'package:techwisever1/services/lesson_score_service.dart';
import 'package:techwisever1/services/score_stream_service.dart'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ScoreStreamService
import 'package:techwisever1/services/user_service.dart'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UserService
import 'package:techwisever1/profile/lesson_reset_page.dart'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LessonResetPage
import 'lesson_intro.dart';

class ComputerTechPage extends StatefulWidget {
  final VoidCallback? onBack;
  const ComputerTechPage({super.key, this.onBack});

  @override
  State<ComputerTechPage> createState() => _ComputerTechPageState();
}

class _ComputerTechPageState extends State<ComputerTechPage> with AutomaticKeepAliveClientMixin {
  // ‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô "‡∏ï‡πà‡∏≠‡∏ö‡∏ó" ‡∏ï‡∏≤‡∏° Firebase: ‡∏ö‡∏ó 1=4, ‡∏ö‡∏ó 2=5, ‡∏ö‡∏ó 3=4
  static const Map<int, int> _requiredStagesPerLessonMap = {1: 4, 2: 5, 3: 4};
  static int _requiredFor(int lesson) =>
      _requiredStagesPerLessonMap[lesson] ?? 4;
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö StreamBuilder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÑ‡∏î‡πâ
  final GlobalKey _lessonScoresKey = GlobalKey();
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ refresh ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  Timer? _autoRefreshTimer;
  bool _isPageActive = true;

  // ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏ó (‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
  List<_LessonMeta> get _lessons => const [
    _LessonMeta(
      lesson: 1,
      title: '‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
      image: 'assets/images/TC1.png',
      intro:
          '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå/‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏ó',
    ),
    _LessonMeta(
      lesson: 2,
      title: '‡∏ö‡∏ó‡∏ó‡∏µ‡πà 2\n‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤',
      image: 'assets/images/TC2.jpg',
      intro:
          '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å IDE, ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏• (‡πÄ‡∏ä‡πà‡∏ô Git) ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á',
    ),
    _LessonMeta(
      lesson: 3,
      title: '‡∏ö‡∏ó‡∏ó‡∏µ‡πà 3\n‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°',
      image: 'assets/images/TC3.png',
      intro:
          '‡∏õ‡∏π‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏•‡∏π‡∏õ ‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î',
    ),
    // üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó 4,5,... ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
  ];

  /// ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
  Future<Map<int, Map<String, dynamic>>> _getLessonScores(String uid) async {
    try {
      return await LessonScoreService.instance.getAllLessonScores(
        uid: uid,
        subject: 'computer',
      );
    } catch (e) {
      debugPrint('Error getting lesson scores: $e');
      return {};
    }
  }

  // ‚úÖ ‡πÑ‡∏õ‡πÅ‡∏ó‡πá‡∏ö "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å" ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ MainScreen ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Å‡πÄ‡∏™‡∏°‡∏≠
  void _goHome(BuildContext context) {
    AppNav.bottomIndex.value = 0; // ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ
    Navigator.of(context).pushAndRemoveUntil(
      MaterialPageRoute(builder: (_) => const MainScreen(initialIndex: 0)),
      (r) => false,
    );
  }

  // ‚úÖ ‡πÑ‡∏õ‡πÅ‡∏ó‡πá‡∏ö "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ MainScreen ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏Å‡πÄ‡∏™‡∏°‡∏≠
  void _goProfile(BuildContext context) {
    AppNav.bottomIndex.value = 1;
    Navigator.of(context).pushAndRemoveUntil(
      MaterialPageRoute(builder: (_) => const MainScreen(initialIndex: 1)),
      (r) => false,
    );
  }

  // ‚úÖ Back ‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏ñ‡∏≠‡∏¢ 1 ‡∏ä‡∏±‡πâ‡∏ô)
  void _goBack(BuildContext context) {
    if (widget.onBack != null) {
      widget.onBack!();
    } else {
      Navigator.pop(context);
    }
  }

  /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  Set<int> _computeCompletedLessons(Map<int, Map<String, dynamic>> lessonScores) {
    final done = <int>{};
    
    for (final entry in lessonScores.entries) {
      final lesson = entry.key;
      final scores = entry.value;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å completedStages ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡∏à‡∏≤‡∏Å isCompleted
      final completedStages = scores['completedStages'] as int? ?? 0;
      final requiredStages = scores['requiredStages'] as int? ?? 5;
      
      // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
      if (completedStages >= requiredStages) {
        done.add(lesson);
      }
    }
    
    return done;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  Future<bool> _checkAdminStatus() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      try {
        return await UserService.isAdmin(user.uid);
      } catch (e) {
        return false;
      }
    }
    return false;
  }
  
  @override
  void dispose() {
    _stopAutoRefresh();
    super.dispose();
  }
  
  @override
  bool get wantKeepAlive => true;
  
  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ refresh ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  void _startAutoRefresh() {
    _autoRefreshTimer?.cancel();
    _autoRefreshTimer = Timer.periodic(const Duration(seconds: 5), (timer) {
      if (mounted && _isPageActive) {
        setState(() {
          // Trigger rebuild ‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        });
      }
    });
  }
  
  /// ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£ refresh ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  void _stopAutoRefresh() {
    _autoRefreshTimer?.cancel();
    _autoRefreshTimer = null;
  }
  
  /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö focus
  void _onPageResume() {
    _isPageActive = true;
    _startAutoRefresh();
    setState(() {
      // Refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏ô‡πâ‡∏≤
    });
  }
  
  /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢ focus
  void _onPagePause() {
    _isPageActive = false;
    _stopAutoRefresh();
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ö‡∏ö force refresh
  Future<void> _refreshScores(BuildContext context) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    try {
      // ‡πÅ‡∏™‡∏î‡∏á loading indicator
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(
          child: Card(
            child: Padding(
              padding: EdgeInsets.all(24),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  SizedBox(
                    width: 24,
                    height: 24,
                    child: CircularProgressIndicator(strokeWidth: 2),
                  ),
                  SizedBox(width: 16),
                  Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô...'),
                ],
              ),
            ),
          ),
        ),
      );
      
      // Force refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
      await ScoreStreamService.instance.forceRefresh(
        uid: user.uid,
        subject: 'computer',
      );
      
      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Firebase ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await Future.delayed(const Duration(milliseconds: 500));
      
      // ‡∏õ‡∏¥‡∏î loading dialog
      if (context.mounted) {
        Navigator.of(context).pop();
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );
        
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        setState(() {});
      }
    } catch (e) {
      // ‡∏õ‡∏¥‡∏î loading dialog
      if (context.mounted) {
        Navigator.of(context).pop();
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e'),
            backgroundColor: Colors.red,
            duration: Duration(seconds: 3),
          ),
        );
      }
    }
  }

  bool get allLessonsCompleted {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ö‡∏ó
    return _lessons.isNotEmpty;
  }

  void _showResetDialog(BuildContext context) {
    showDialog(
      context: context,
      barrierDismissible: false, // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
      builder: (context) => AlertDialog(
        title: const Text(
          '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤',
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red),
        ),
        content: const Text(
          '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n'
          '‚Ä¢ ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà\n'
          '‚Ä¢ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n'
          '‚Ä¢ ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1 ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1\n\n'
          '‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ',
          style: TextStyle(fontSize: 14),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            style: TextButton.styleFrom(foregroundColor: Colors.grey[600]),
            child: const Text('‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà', style: TextStyle(fontSize: 16)),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.of(context).pop();
              await _performReset(context);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            ),
            child: const Text(
              '‡πÉ‡∏ä‡πà',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _performReset(BuildContext context) async {
    final uid = FirebaseAuth.instance.currentUser?.uid;
    if (uid == null) return;

    try {
      // ‡πÅ‡∏™‡∏î‡∏á loading dialog
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const AlertDialog(
          content: Row(
            children: [
              CircularProgressIndicator(),
              SizedBox(width: 16),
              Expanded(child: Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤...')),
            ],
          ),
        ),
      );

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ó
      await ProgressService.I.resetSubjectProgress(
        uid: uid,
        subject: 'computer',
      );

      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Firebase ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await Future.delayed(const Duration(milliseconds: 500));

      // ‡∏õ‡∏¥‡∏î loading dialog
      if (context.mounted) {
        Navigator.of(context).pop();
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (context.mounted) {
        LoadingUtils.showSuccess(context, '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        setState(() {});
        
        // ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        await Future.delayed(const Duration(seconds: 3));
        if (context.mounted) {
          setState(() {});
        }
      }
    } catch (e) {
      // ‡∏õ‡∏¥‡∏î loading dialog
      if (context.mounted) {
        Navigator.of(context).pop();
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      if (context.mounted) {
        LoadingUtils.showError(context, '‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ó‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final uid = FirebaseAuth.instance.currentUser?.uid;

    return WillPopScope(
      onWillPop: () async {
        _goBack(context); // ‚úÖ ‡∏ñ‡∏≠‡∏¢ 1 ‡∏ä‡∏±‡πâ‡∏ô
        return false;
      },
      child: Scaffold(
        body: Stack(
          children: [
            // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
            Container(
              decoration: const BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    Color(0xFF1E3C72), // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°
                    Color(0xFF2A5298), // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    Color(0xFF4A90E2), // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô
                  ],
                ),
              ),
            ),

            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö pattern ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
            Positioned.fill(
              child: CustomPaint(painter: BackgroundPatternPainter()),
            ),

            // AppBar (‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö electronics_page)
            Positioned(
              top: 0,
              left: 0,
              right: 0,
              child: Container(
                height: 80,
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.95),
                  borderRadius: const BorderRadius.only(
                    bottomLeft: Radius.circular(20),
                    bottomRight: Radius.circular(20),
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.2),
                      blurRadius: 8,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: SafeArea(
                  child: Row(
                    children: [
                      IconButton(
                        icon: const Icon(
                          Icons.arrow_back_ios_new,
                          color: Colors.white,
                          size: 28,
                        ),
                        onPressed: () => _goBack(context),
                        style: IconButton.styleFrom(
                          backgroundColor: Colors.indigo,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.all(8),
                          minimumSize: const Size(44, 44),
                        ),
                      ),
                      Expanded(
                        child: Text(
                          '‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
                          style: const TextStyle(
                            color: Colors.black87,
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                      // ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                      IconButton(
                        icon: const Icon(Icons.refresh, color: Colors.indigo),
                        onPressed: () => _refreshScores(context),
                        tooltip: '‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô',
                      ),
                      // ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô (‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡πÄ‡∏™‡∏°‡∏≠)
                      FutureBuilder<bool>(
                        future: _checkAdminStatus(),
                        builder: (context, snapshot) {
                          if (snapshot.data == true) {
                            return IconButton(
                              icon: const Icon(Icons.delete_forever, color: Colors.orange),
                              onPressed: () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) => const LessonResetPage(),
                                  ),
                                );
                              },
                              tooltip: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)',
                            );
                          }
                          return const SizedBox.shrink(); // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
                        },
                      ),
                    ],
                  ),
                ),
              ),
            ),

            // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏ô‡πâ‡∏≤
            Positioned(
              top: 100,
              left: 0,
              right: 0,
              bottom: 0,
              child: StreamBuilder<Map<int, Map<String, dynamic>>>(
                key: _lessonScoresKey,
                stream: uid != null ? ScoreStreamService.instance.getAllLessonScoresStream(uid: uid, subject: 'computer') : Stream.value({}),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator(color: Colors.white));
                  }

                  final lessonScores = snapshot.data ?? {};
                  final completed = _computeCompletedLessons(lessonScores);

                  return StreamBuilder<bool>(
                    stream: uid != null 
                        ? ScoreStreamService.instance.getSubjectCompletionStream(uid: uid, subject: 'computer')
                        : Stream.value(false),
                    builder: (context, subjectSnapshot) {
                      final allLessonsCompleted = subjectSnapshot.data ?? false;

                      return FutureBuilder<bool>(
                        future: _checkAdminStatus(),
                        builder: (context, adminSnapshot) {
                          final isAdmin = adminSnapshot.data ?? false;

                          return SingleChildScrollView(
                            child: Column(
                              children: [
                                ..._lessons.map((meta) {
                                  final l = meta.lesson;
                                  final isUnlocked = isAdmin || l == 1 || completed.contains(l - 1);
                                  final lockReason = l == 1 ? null : '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏ó‡∏ó‡∏µ‡πà ${l - 1}';
                                  final scores = lessonScores[l];
                                  return Padding(
                                    padding: const EdgeInsets.only(bottom: 20),
                                    child: _LessonCard(
                                      title: meta.title,
                                      imagePath: meta.image,
                                      locked: !isUnlocked,
                                      lockReason: lockReason,
                                      scores: scores,
                                      onTap: () {
                                        if (!isUnlocked) return;
                                        Navigator.of(context).push(
                                          MaterialPageRoute(
                                            builder: (_) => LessonIntroPage(
                                              subject: 'computer',
                                              lesson: l,
                                              title: meta.cleanTitle,
                                              intro: meta.intro,
                                              heroAsset: meta.image,
                                            ),
                                          ),
                                        );
                                      },
                                      allLessonsCompleted: allLessonsCompleted, // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á _LessonCard
                                    ),
                                  );
                                }).toList(),

                                // ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                                if (allLessonsCompleted)
                                  Padding(
                                    padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 20),
                                    child: Container(
                                      width: double.infinity,
                                      height: 60,
                                      decoration: BoxDecoration(
                                        borderRadius: BorderRadius.circular(20),
                                        gradient: const LinearGradient(
                                          colors: [Color(0xFFFF6B6B), Color(0xFFEE5A52)],
                                          begin: Alignment.topLeft,
                                          end: Alignment.bottomRight,
                                        ),
                                        boxShadow: [
                                          BoxShadow(
                                            color: Colors.red.withOpacity(0.3),
                                            blurRadius: 8,
                                            offset: const Offset(0, 4),
                                          ),
                                        ],
                                      ),
                                      child: ElevatedButton(
                                        onPressed: () => _showResetDialog(context),
                                        style: ElevatedButton.styleFrom(
                                          backgroundColor: Colors.transparent,
                                          shadowColor: Colors.transparent,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(20),
                                          ),
                                        ),
                                        child: const Row(
                                          mainAxisAlignment: MainAxisAlignment.center,
                                          children: [
                                            Icon(Icons.refresh, color: Colors.white, size: 24),
                                            SizedBox(width: 8),
                                            Text(
                                              '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                                              style: TextStyle(
                                                color: Colors.white,
                                                fontSize: 16,
                                                fontWeight: FontWeight.bold,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),
                              ],
                            ),
                          );
                        },
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/* ============================ Models/Widgets ========================== */

class _LessonMeta {
  final int lesson;
  final String title;
  final String image;
  final String intro;
  const _LessonMeta({
    required this.lesson,
    required this.title,
    required this.image,
    required this.intro,
  });
  String get cleanTitle => title.replaceAll('\n', ' ');
}

class _LessonCard extends StatelessWidget {
  final String title;
  final String imagePath;
  final VoidCallback onTap;
  final bool locked;
  final String? lockReason;
  final Map<String, dynamic>? scores;
  final bool allLessonsCompleted; // ‡πÄ‡∏û‡∏¥‡πà‡∏° parameter ‡πÉ‡∏´‡∏°‡πà
  const _LessonCard({
    required this.title,
    required this.imagePath,
    required this.onTap,
    this.locked = false,
    this.lockReason,
    this.scores,
    this.allLessonsCompleted = false, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô false
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: locked ? null : onTap,
      child: Container(
        margin: const EdgeInsets.symmetric(horizontal: 20),
        height: 160,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.15),
              blurRadius: 6,
              offset: const Offset(0, 3),
            ),
          ],
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(20),
          child: Stack(
            children: [
              Opacity(
                opacity: locked ? 0.6 : 1.0,
                child: Image.asset(
                  imagePath,
                  width: double.infinity,
                  height: 160,
                  fit: BoxFit.cover,
                ),
              ),
              Positioned(
                left: 12,
                top: 12,
                child: Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 10,
                    vertical: 6,
                  ),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.85),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    title,
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.black,
                    ),
                  ),
                ),
              ),
              // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏ï‡∏£‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á
              if (scores != null)
                Positioned(
                  left: 12,
                  bottom: 12,
                  child: Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 10,
                      vertical: 6,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.black.withOpacity(0.8),
                      borderRadius: BorderRadius.circular(10),
                      border: Border.all(
                        color: Colors.white.withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                    child: Text(
                      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß
                      scores!['isCompleted'] == true && allLessonsCompleted
                          ? '‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ${scores!['score']}/${scores!['total']}'
                          : '??/${scores!['total']}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                        shadows: [
                          Shadow(
                            offset: Offset(1, 1),
                            blurRadius: 2,
                            color: Colors.black,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              Positioned(
                bottom: 12,
                right: 12,
                child: ElevatedButton(
                  onPressed: locked ? null : onTap,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.white.withOpacity(0.9),
                    foregroundColor: Colors.black,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: const Text(
                    '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
                    style: TextStyle(fontWeight: FontWeight.w600),
                  ),
                ),
              ),
              if (locked)
                Container(
                  color: Colors.black.withOpacity(0.25),
                  alignment: Alignment.center,
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      const Icon(Icons.lock, color: Colors.white),
                      const SizedBox(width: 8),
                      Text(
                        lockReason ?? '‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏ó‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤',
                        style: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° BackgroundPatternPainter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö pattern
class BackgroundPatternPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.white.withOpacity(0.04)
      ..strokeWidth = 1.5;

    // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡πÅ‡∏¢‡∏á‡πÅ‡∏ö‡∏ö modern
    for (double i = -size.height; i < size.width + size.height; i += 80) {
      canvas.drawLine(
        Offset(i, 0),
        Offset(i + size.height, size.height),
        paint,
      );
    }

    // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡πÅ‡∏¢‡∏á‡∏Å‡∏•‡∏±‡∏ö
    for (double i = 0; i < size.width + size.height; i += 80) {
      canvas.drawLine(
        Offset(i, 0),
        Offset(i - size.height, size.height),
        paint,
      );
    }

    // ‡∏ß‡∏≤‡∏î‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÅ‡∏ö‡∏ö floating
    final circlePaint = Paint()
      ..color = Colors.white.withOpacity(0.03)
      ..style = PaintingStyle.fill;

    // ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÉ‡∏´‡∏ç‡πà
    canvas.drawCircle(
      Offset(size.width * 0.8, size.height * 0.2),
      100,
      circlePaint,
    );

    // ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏Å‡∏•‡∏≤‡∏á
    canvas.drawCircle(
      Offset(size.width * 0.2, size.height * 0.7),
      80,
      circlePaint,
    );

    // ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÄ‡∏•‡πá‡∏Å
    canvas.drawCircle(
      Offset(size.width * 0.9, size.height * 0.8),
      50,
      circlePaint,
    );

    // ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    canvas.drawCircle(
      Offset(size.width * 0.1, size.height * 0.3),
      40,
      circlePaint,
    );

    // ‡∏ß‡∏≤‡∏î‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡πá‡∏Å‡πÜ
    final rectPaint = Paint()
      ..color = Colors.white.withOpacity(0.02)
      ..style = PaintingStyle.fill;

    canvas.drawRect(
      Rect.fromLTWH(size.width * 0.1, size.height * 0.1, 25, 25),
      rectPaint,
    );

    canvas.drawRect(
      Rect.fromLTWH(size.width * 0.7, size.height * 0.6, 20, 20),
      rectPaint,
    );

    // ‡∏ß‡∏≤‡∏î‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    canvas.drawRect(
      Rect.fromLTWH(size.width * 0.8, size.height * 0.1, 15, 15),
      rectPaint,
    );

    // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡πÅ‡∏ö‡∏ö modern
    final curvePaint = Paint()
      ..color = Colors.white.withOpacity(0.02)
      ..strokeWidth = 2.0
      ..style = PaintingStyle.stroke;

    // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
    final path1 = Path()
      ..moveTo(0, size.height * 0.1)
      ..quadraticBezierTo(
        size.width * 0.5,
        size.height * 0.05,
        size.width,
        size.height * 0.1,
      );
    canvas.drawPath(path1, curvePaint);

    // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
    final path2 = Path()
      ..moveTo(0, size.height * 0.9)
      ..quadraticBezierTo(
        size.width * 0.5,
        size.height * 0.95,
        size.width,
        size.height * 0.9,
      );
    canvas.drawPath(path2, curvePaint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}
