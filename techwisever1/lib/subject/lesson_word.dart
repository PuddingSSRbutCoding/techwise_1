import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_markdown/flutter_markdown.dart';

class LessonWordPage extends StatefulWidget {
  final String subject;   // 'computer' ‡∏´‡∏£‡∏∑‡∏≠ 'electronics'
  final int lesson;       // ‡πÄ‡∏•‡∏Ç‡∏ö‡∏ó
  final int stage;        // ‡πÄ‡∏•‡∏Ç‡∏î‡πà‡∏≤‡∏ô
  final String? fallbackHeroAsset;
  final String? wordDocId; // ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Å‡πá‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏° subject

  const LessonWordPage({
    super.key,
    required this.subject,
    required this.lesson,
    required this.stage,
    this.fallbackHeroAsset,
    this.wordDocId,
  });

  @override
  State<LessonWordPage> createState() => _LessonWordPageState();
}

class _LessonWordPageState extends State<LessonWordPage> {
  final _scrollCtrl = ScrollController();
  double _readProgress = 0.0;

  // ‚úÖ ‡πÅ‡∏Ñ‡∏ä‡∏™‡∏ï‡∏£‡∏µ‡∏°‡πÑ‡∏ß‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö/‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
  late final Stream<Map<String, dynamic>?> _contentStream;

  @override
  void initState() {
    super.initState();
    _contentStream = _createDocStream().asBroadcastStream();
    _scrollCtrl.addListener(_updateProgress);
  }

  @override
  void dispose() {
    _scrollCtrl.removeListener(_updateProgress);
    _scrollCtrl.dispose();
    super.dispose();
  }

  // throttle: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 1% ‡∏Ñ‡πà‡∏≠‡∏¢ setState
  void _updateProgress() {
    if (!_scrollCtrl.hasClients) return;
    final max = _scrollCtrl.position.maxScrollExtent;
    final offset = _scrollCtrl.offset.clamp(0.0, max);
    final p = max == 0 ? 0.0 : (offset / max);
    if ((p - _readProgress).abs() > 0.01) {
      setState(() => _readProgress = p);
    }
  }

  /* ============= Data layer ============= */

  // ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á subject ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ó‡∏≥ alias/query
  String _subjectCanonical(String s) {
    final ss = s.toLowerCase().trim();
    if (ss.startsWith('comp')) return 'computer';
    if (ss.startsWith('elec')) return 'electronics';
    return ss;
  }

  // alias ‡∏Ç‡∏≠‡∏á subject (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏∞‡∏Å‡∏î‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢)
  List<String> _subjectAliases(String canonical) {
    if (canonical == 'electronics') {
      return const ['electronics', 'electronic', 'elec'];
    }
    if (canonical == 'computer') {
      return const ['computer', 'computers', 'comp', 'com'];
    }
    return [canonical];
  }

  // map subject -> ‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ä‡∏±‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
  String _collectionForSubject(String s) {
    final c = _subjectCanonical(s);
    if (c == 'computer') return 'lesson_com';      // ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
    if (c == 'electronics') return 'lesson_words'; // ‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏Ø
    return 'lesson_words';
  }

  // ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ä‡∏∑‡πà‡∏≠ docId (‡πÄ‡∏ä‡πà‡∏ô electronic_1_2)
  Future<Map<String, dynamic>?> _tryGetByDocIdCandidates(String colName) async {
    final l = widget.lesson;
    final st = widget.stage;
    final canon = _subjectCanonical(widget.subject);

    final candidates = <String>[
      if (canon == 'electronics') ...[
        'electronic_${l}_${st}',
        'electronics_${l}_${st}',
        'elec_${l}_${st}',
      ] else if (canon == 'computer') ...[
        'computer_${l}_${st}',
        'computers_${l}_${st}',
        'comp_${l}_${st}',
        'com_${l}_${st}',
      ] else
        '${canon}_${l}_${st}',
    ];

    for (final id in candidates) {
      final doc = await FirebaseFirestore.instance.collection(colName).doc(id).get();
      if (doc.exists) return doc.data();
    }
    return null;
  }

  // ‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏î‡πâ‡∏ß‡∏¢ subject aliases ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö stage/state
  Future<Map<String, dynamic>?> _queryByAliases(String colName) async {
    final aliases = _subjectAliases(_subjectCanonical(widget.subject));

    // ‡∏•‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ stage ‡∏Å‡πà‡∏≠‡∏ô
    var qs = await FirebaseFirestore.instance
        .collection(colName)
        .where('subject', whereIn: aliases)
        .where('lesson', isEqualTo: widget.lesson)
        .where('stage', isEqualTo: widget.stage)
        .limit(1)
        .get();
    if (qs.docs.isNotEmpty) return qs.docs.first.data();

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á state ‡πÅ‡∏ó‡∏ô
    qs = await FirebaseFirestore.instance
        .collection(colName)
        .where('subject', whereIn: aliases)
        .where('lesson', isEqualTo: widget.lesson)
        .where('state', isEqualTo: widget.stage)
        .limit(1)
        .get();
    if (qs.docs.isNotEmpty) return qs.docs.first.data();

    // ‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏™‡πÑ‡∏°‡πà‡∏°‡∏µ subject ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏ó/‡∏î‡πà‡∏≤‡∏ô)
    qs = await FirebaseFirestore.instance
        .collection(colName)
        .where('lesson', isEqualTo: widget.lesson)
        .where('stage', isEqualTo: widget.stage)
        .limit(1)
        .get();
    if (qs.docs.isNotEmpty) return qs.docs.first.data();

    qs = await FirebaseFirestore.instance
        .collection(colName)
        .where('lesson', isEqualTo: widget.lesson)
        .where('state', isEqualTo: widget.stage)
        .limit(1)
        .get();
    if (qs.docs.isNotEmpty) return qs.docs.first.data();

    return null;
  }

  // fallback ‡∏£‡∏ß‡∏°: ‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏î‡πâ‡∏ß‡∏¢ aliases -> ‡∏•‡∏≠‡∏á docId ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
  Future<Map<String, dynamic>?> _fallbackLookupContent() async {
    final colName = _collectionForSubject(widget.subject);
    final byAliases = await _queryByAliases(colName);
    if (byAliases != null) return byAliases;
    return await _tryGetByDocIdCandidates(colName);
  }

  // stream ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: resolve ‡∏à‡∏≤‡∏Å subjects/... ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏° wordDocId ‡∏´‡∏£‡∏∑‡∏≠ query
  Stream<Map<String, dynamic>?> _createDocStream() async* {
    // 0) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ wordDocId ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î doc ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ä‡∏±‡∏ô subject
    if (widget.wordDocId != null && widget.wordDocId!.isNotEmpty) {
      final col = FirebaseFirestore.instance.collection(_collectionForSubject(widget.subject));
      yield* col.doc(widget.wordDocId!).snapshots().map((d) => d.data());
      return;
    }

    // 1) ‡∏ï‡∏£‡∏ß‡∏à meta ‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á subject/lesson/stage (‡πÉ‡∏ä‡πâ widget.subject ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°)
    final subjDocRef = FirebaseFirestore.instance
        .collection('subjects')
        .doc(widget.subject)
        .collection('lessons')
        .doc(widget.lesson.toString())
        .collection('stages')
        .doc(widget.stage.toString());

    await for (final metaSnap in subjDocRef.snapshots()) {
      final meta = metaSnap.data();

      // 1.1) ‡πÑ‡∏°‡πà‡∏°‡∏µ meta ‚Üí fallback (‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏î‡πâ‡∏ß‡∏¢ aliases ‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á docId ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö)
      if (meta == null) {
        yield await _fallbackLookupContent();
        continue;
      }

      // 1.2) meta ‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      if (meta.containsKey('title') || meta.containsKey('content') || meta.containsKey('image')) {
        yield meta;
        continue;
      }

      // 1.3) meta ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ ‚Üí ‡πÉ‡∏ä‡πâ sourceCollection/docId ‡∏´‡∏£‡∏∑‡∏≠ query
      final colName =
          (meta['sourceCollection'] ?? meta['collection'] ?? meta['col']) as String? ??
              _collectionForSubject(widget.subject);
      final docId = (meta['wordDocId'] ?? meta['docId']) as String?;

      if (docId != null && docId.isNotEmpty) {
        final stream = FirebaseFirestore.instance
            .collection(colName)
            .doc(docId)
            .snapshots()
            .map((d) => d.data());
        await for (final d in stream) {
          yield d;
          break;
        }
      } else {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ docId ‡πÉ‡∏´‡πâ‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏î‡πâ‡∏ß‡∏¢ aliases ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏•‡∏≠‡∏á docId ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
        final data = await _queryByAliases(colName) ?? await _tryGetByDocIdCandidates(colName);
        yield data;
      }
    }
  }

  /* ============= UI ============= */

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        // üîí ‡∏õ‡∏¥‡∏î‡∏ó‡∏≤‡∏á "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ Question" ‡πÇ‡∏î‡∏¢‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡πà‡∏á false ‡πÄ‡∏™‡∏°‡∏≠
        if (Navigator.of(context).canPop()) {
          Navigator.of(context).pop(false); // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå = false
          return false;                     // ‡πÄ‡∏£‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ pop ‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
        }
        return true; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
      },
      child: Scaffold(
        body: Stack(
          children: [
            // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
            SizedBox.expand(
              child: Image.asset('assets/images/backgroundselect.jpg', fit: BoxFit.cover),
            ),

            SafeArea(
              child: Column(
                children: [
                  // ‡πÅ‡∏ñ‡∏ö‡∏ö‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ)
                  _TopBar(
                    titleStream: _contentStream.map((d) => (d?['title'] as String?) ?? '‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'),
                  ),

                  // ‡πÅ‡∏ñ‡∏ö progress ‡∏≠‡πà‡∏≤‡∏ô
                  SizedBox(
                    height: 4,
                    child: LinearProgressIndicator(
                      value: _readProgress,
                      backgroundColor: Colors.white.withOpacity(0.25),
                      color: Colors.indigo,
                      minHeight: 4,
                    ),
                  ),

                  // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                  Expanded(
                    child: StreamBuilder<Map<String, dynamic>?>(
                      stream: _contentStream,
                      builder: (context, snap) {
                        if (snap.connectionState == ConnectionState.waiting) {
                          return const _LoadingSkeleton();
                        }
                        final data = snap.data;
                        if (data == null) {
                          return const _EmptyState(
                            message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô Firebase (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö subjects/* ‡∏´‡∏£‡∏∑‡∏≠ collection ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á)',
                          );
                        }

                        final title = (data['title'] as String?) ?? '‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
                        final content = (data['content'] as String?) ?? '';
                        final imageUrl = data['image'] as String?;

                        return SingleChildScrollView(
                          controller: _scrollCtrl,
                          padding: const EdgeInsets.fromLTRB(16, 16, 16, 96),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.stretch,
                            children: [
                              if (imageUrl != null && imageUrl.isNotEmpty)
                                _HeroImage(url: imageUrl)
                              else if (widget.fallbackHeroAsset != null)
                                _HeroAsset(path: widget.fallbackHeroAsset!),

                              Container(
                                margin: const EdgeInsets.only(top: 16),
                                padding: const EdgeInsets.all(18),
                                decoration: BoxDecoration(
                                  color: Colors.white.withOpacity(0.96),
                                  borderRadius: BorderRadius.circular(18),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.black.withOpacity(0.12),
                                      blurRadius: 16,
                                      offset: const Offset(0, 8),
                                    ),
                                  ],
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    const Text(
                                      '‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
                                      style: TextStyle(fontSize: 20, fontWeight: FontWeight.w800),
                                    ),
                                    const SizedBox(height: 12),
                                    MarkdownBody(
                                      data: '# $title\n\n$content',
                                      selectable: false,
                                      styleSheet: _markdownStyle(context),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),

            // CTA ‡∏•‡∏≠‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
            Positioned(
              left: 0, right: 0, bottom: 0,
              child: SafeArea(
                top: false,
                child: Padding(
                  padding: const EdgeInsets.fromLTRB(16, 8, 16, 16),
                  child: SizedBox(
                    height: 54,
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.indigo,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
                        elevation: 6,
                      ),
                      onPressed: () {
                        // ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‚Üí ‡∏™‡πà‡∏á true ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
                        Navigator.pop(context, true);
                      },
                      child: const Text(
                        '‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°!!',
                        style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  MarkdownStyleSheet _markdownStyle(BuildContext context) {
    final base = Theme.of(context).textTheme;
    return MarkdownStyleSheet(
      p: base.bodyMedium!.copyWith(fontSize: 16, height: 1.6),
      h1: base.headlineSmall!.copyWith(fontSize: 22, fontWeight: FontWeight.w800),
      h2: base.titleLarge!.copyWith(fontSize: 20, fontWeight: FontWeight.w800),
      h3: base.titleMedium!.copyWith(fontSize: 18, fontWeight: FontWeight.w700),
      strong: const TextStyle(fontWeight: FontWeight.w800),
      em: const TextStyle(fontStyle: FontStyle.italic),
      listBullet: base.bodyMedium!.copyWith(fontSize: 16),
      blockquote: base.bodyMedium!.copyWith(fontSize: 16, height: 1.6),
      blockquoteDecoration: BoxDecoration(
        color: Colors.indigo.withOpacity(0.06),
        border: const Border(left: BorderSide(color: Colors.indigoAccent, width: 4)),
      ),
      code: TextStyle(
        fontFamily: 'monospace',
        fontSize: 14,
        backgroundColor: Colors.grey.shade100,
      ),
      horizontalRuleDecoration: BoxDecoration(
        border: Border(bottom: BorderSide(width: 2, color: Colors.grey.shade300)),
      ),
    );
  }
}

/* ---------- Widgets ‡∏¢‡πà‡∏≠‡∏¢ (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö) ---------- */

class _TopBar extends StatelessWidget {
  final Stream<String> titleStream;

  const _TopBar({
    required this.titleStream,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 64,
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.95),
        borderRadius: const BorderRadius.only(
          bottomLeft: Radius.circular(18),
          bottomRight: Radius.circular(18),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.12),
            blurRadius: 8,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      padding: const EdgeInsets.symmetric(horizontal: 12),
      child: Row(
        children: [
          // ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ IconButton ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
          Expanded(
            child: StreamBuilder<String>(
              stream: titleStream,
              builder: (context, s) {
                final title = (s.data ?? '‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô').trim();
                return Text(
                  title.isEmpty ? '‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' : title,
                  textAlign: TextAlign.center,
                  overflow: TextOverflow.ellipsis,
                  style: const TextStyle(fontWeight: FontWeight.w800, fontSize: 16),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class _HeroImage extends StatelessWidget {
  final String url;
  const _HeroImage({required this.url});
  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(16),
      child: AspectRatio(aspectRatio: 16 / 9, child: Image.network(url, fit: BoxFit.cover)),
    );
  }
}

class _HeroAsset extends StatelessWidget {
  final String path;
  const _HeroAsset({required this.path});
  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(16),
      child: AspectRatio(aspectRatio: 16 / 9, child: Image.asset(path, fit: BoxFit.cover)),
    );
  }
}

class _LoadingSkeleton extends StatelessWidget {
  const _LoadingSkeleton();
  @override
  Widget build(BuildContext context) {
    return ListView(
      padding: const EdgeInsets.fromLTRB(16, 16, 16, 96),
      children: [
        _skel(height: 180, radius: 16),
        const SizedBox(height: 16),
        _skel(height: 22, width: 220),
        const SizedBox(height: 12),
        _skel(height: 16),
        const SizedBox(height: 8),
        _skel(height: 16, width: 280),
        const SizedBox(height: 8),
        _skel(height: 16, width: 240),
      ],
    );
  }

  Widget _skel({double height = 14, double? width, double radius = 12}) {
    return Container(
      height: height,
      width: width,
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.6),
        borderRadius: BorderRadius.circular(radius),
      ),
    );
  }
}

class _EmptyState extends StatelessWidget {
  final String message;
  const _EmptyState({required this.message});
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Text(
          message,
          textAlign: TextAlign.center,
          style: const TextStyle(fontSize: 14, color: Colors.black54),
        ),
      ),
    );
  }
}
