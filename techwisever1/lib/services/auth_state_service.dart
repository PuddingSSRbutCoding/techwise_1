import 'package:flutter/foundation.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'user_service.dart';
import 'dart:async';

/// Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ authentication state ‡πÅ‡∏•‡∏∞ user data
class AuthStateService {
  static AuthStateService? _instance;
  static AuthStateService get instance => _instance ??= AuthStateService._();

  AuthStateService._();

  final ValueNotifier<bool> isLoadingUser = ValueNotifier(false);
  final ValueNotifier<Map<String, dynamic>?> userData = ValueNotifier(null);
  final ValueNotifier<String?> error = ValueNotifier(null);

  StreamSubscription<User?>? _authSubscription;
  Timer? _timeoutTimer;

  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô service ‡πÅ‡∏•‡∏∞ listen ‡∏ï‡πà‡∏≠ auth state changes
  void initialize() {
    _authSubscription = FirebaseAuth.instance.authStateChanges().listen(
      _handleAuthStateChange,
      onError: (error) {
        debugPrint('Auth state error: $error');
        this.error.value = error.toString();
      },
    );
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á auth state
  void _handleAuthStateChange(User? user) async {
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timer ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ auth state change
    _timeoutTimer?.cancel();

    if (user == null) {
      // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      stopLoadingAndClearData();
      debugPrint('üîÑ Auth state cleared - user signed out');
      return;
    }

    // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö - ‡∏´‡∏¢‡∏∏‡∏î loading state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    isLoadingUser.value = false;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    final currentUid = userData.value?['uid'];
    if (currentUid == user.uid) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
      debugPrint('üîÑ Same user - skipping reload: ${user.email}');
      return;
    }

    // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà - ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
    debugPrint('üîÑ Auth state changed - loading user data for: ${user.email}');

    // ‡πÉ‡∏ä‡πâ Future.microtask ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö mounted state
    Future.microtask(() {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤ user ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser?.uid == user.uid) {
        _loadUserDataFast(user.uid);
      } else {
        debugPrint('üîÑ User changed during loading - cancelling');
      }
    });
  }

  /// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß (‡∏•‡∏î timeout ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ fallback ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
  Future<void> _loadUserDataFast(String uid) async {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser?.uid != uid) {
      debugPrint('üîÑ User changed before loading started - aborting');
      return;
    }

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timer ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    _timeoutTimer?.cancel();

    isLoadingUser.value = true;
    error.value = null;

    // ‡∏•‡∏î timeout ‡πÄ‡∏õ‡πá‡∏ô 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ responsive ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    _timeoutTimer = Timer(const Duration(milliseconds: 1500), () {
      if (isLoadingUser.value) {
        debugPrint('‚ö†Ô∏è User data loading timeout - using fallback immediately');
        isLoadingUser.value = false;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á fallback
        final stillCurrentUser = FirebaseAuth.instance.currentUser;
        if (stillCurrentUser?.uid == uid) {
          _createFallbackUserData(uid)
              .then((fallbackData) {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô set ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                final finalCheck = FirebaseAuth.instance.currentUser;
                if (finalCheck?.uid == uid) {
                  userData.value = fallbackData;
                  debugPrint('‚úÖ Using fallback user data after timeout');
                }
              })
              .catchError((e) {
                debugPrint('‚ùå Fallback data creation failed: $e');
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á error
                final errorUser = FirebaseAuth.instance.currentUser;
                if (errorUser?.uid == uid) {
                  error.value = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ';
                }
              });
        }
      }
    });

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° request
      final checkUser = FirebaseAuth.instance.currentUser;
      if (checkUser?.uid != uid) {
        debugPrint('üîÑ User changed during loading - aborting request');
        return;
      }

      // ‡πÉ‡∏ä‡πâ timeout ‡πÉ‡∏ô UserService call ‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤ (1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
      final data = await UserService.getUserData(uid).timeout(
        const Duration(seconds: 1),
        onTimeout: () {
          debugPrint('‚ö†Ô∏è UserService.getUserData timeout - using fallback');
          return null;
        },
      );

      _timeoutTimer?.cancel();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      final postRequestUser = FirebaseAuth.instance.currentUser;
      if (postRequestUser?.uid != uid) {
        debugPrint('üîÑ User changed after request - discarding data');
        return;
      }

      if (data != null) {
        userData.value = data;
        isLoadingUser.value = false;
        error.value = null;
        debugPrint('‚úÖ User data loaded successfully');
      } else {
        // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
        debugPrint('‚ö†Ô∏è No user data found, creating new user...');
        try {
          await _createUserDataFast(uid);
        } catch (createError) {
          debugPrint('‚ùå Failed to create user data: $createError');
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á fallback
          final fallbackCheck = FirebaseAuth.instance.currentUser;
          if (fallbackCheck?.uid == uid) {
            userData.value = await _createFallbackUserData(uid);
            isLoadingUser.value = false;
            error.value = null;
          }
        }
      }
    } catch (e) {
      _timeoutTimer?.cancel();
      debugPrint('‚ùå Failed to load user data: $e');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
      final errorUser = FirebaseAuth.instance.currentUser;
      if (errorUser?.uid != uid) {
        debugPrint('üîÑ User changed during error handling - skipping');
        return;
      }

      // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase Auth ‡πÅ‡∏ó‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      try {
        userData.value = await _createFallbackUserData(uid);
        isLoadingUser.value = false;
        error.value = null;
        debugPrint('‚úÖ Using fallback user data after error');
      } catch (fallbackError) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á error
        final finalErrorCheck = FirebaseAuth.instance.currentUser;
        if (finalErrorCheck?.uid == uid) {
          isLoadingUser.value = false;
          error.value = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ';
          debugPrint('‚ùå Fallback user data failed: $fallbackError');
        }
      }
    }
  }

  /// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
  Future<void> _loadUserData(String uid) async {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser?.uid != uid) {
      debugPrint('üîÑ User changed before loading started - aborting');
      return;
    }

    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timer ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    _timeoutTimer?.cancel();

    isLoadingUser.value = true;
    error.value = null;

    // ‡∏•‡∏î timeout ‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ responsive ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    _timeoutTimer = Timer(const Duration(seconds: 2), () {
      if (isLoadingUser.value) {
        debugPrint('‚ö†Ô∏è User data loading timeout');
        isLoadingUser.value = false;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á fallback
        final stillCurrentUser = FirebaseAuth.instance.currentUser;
        if (stillCurrentUser?.uid == uid) {
          _createFallbackUserData(uid)
              .then((fallbackData) {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô set ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                final finalCheck = FirebaseAuth.instance.currentUser;
                if (finalCheck?.uid == uid) {
                  userData.value = fallbackData;
                  debugPrint('‚úÖ Using fallback user data after timeout');
                }
              })
              .catchError((e) {
                debugPrint('‚ùå Fallback data creation failed: $e');
                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á error
                final errorCheck = FirebaseAuth.instance.currentUser;
                if (errorCheck?.uid == uid) {
                  error.value = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ';
                }
              });
        }
      }
    });

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° request
      final checkUser = FirebaseAuth.instance.currentUser;
      if (checkUser?.uid != uid) {
        debugPrint('üîÑ User changed during loading - aborting request');
        return;
      }

      // ‡πÉ‡∏ä‡πâ timeout ‡πÉ‡∏ô UserService call ‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤
      final data = await UserService.getUserData(uid).timeout(
        const Duration(seconds: 1),
        onTimeout: () {
          debugPrint('‚ö†Ô∏è UserService.getUserData timeout');
          return null;
        },
      );

      _timeoutTimer?.cancel();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      final postRequestUser = FirebaseAuth.instance.currentUser;
      if (postRequestUser?.uid != uid) {
        debugPrint('üîÑ User changed after request - discarding data');
        return;
      }

      if (data != null) {
        userData.value = data;
        debugPrint('‚úÖ User data loaded successfully');
      } else {
        // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        debugPrint('‚ö†Ô∏è No user data found, creating new user...');
        try {
          await _createUserData(uid);
        } catch (createError) {
          debugPrint('‚ùå Failed to create user data: $createError');
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á fallback
          final fallbackCheck = FirebaseAuth.instance.currentUser;
          if (fallbackCheck?.uid == uid) {
            userData.value = await _createFallbackUserData(uid);
          }
        }
      }

      isLoadingUser.value = false;
      error.value = null;
    } catch (e) {
      _timeoutTimer?.cancel();
      debugPrint('‚ùå Failed to load user data: $e');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
      final errorUser = FirebaseAuth.instance.currentUser;
      if (errorUser?.uid != uid) {
        debugPrint('üîÑ User changed during error handling - skipping');
        return;
      }

      // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase Auth ‡πÅ‡∏ó‡∏ô
      try {
        userData.value = await _createFallbackUserData(uid);
        isLoadingUser.value = false;
        error.value = null;
        debugPrint('‚úÖ Using fallback user data');
      } catch (fallbackError) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á error
        final finalErrorCheck = FirebaseAuth.instance.currentUser;
        if (finalErrorCheck?.uid == uid) {
          isLoadingUser.value = false;
          error.value = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ';
          debugPrint('‚ùå Fallback user data failed: $fallbackError');
        }
      }
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß (‡∏•‡∏î timeout)
  Future<void> _createUserDataFast(String uid) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        await UserService.createOrUpdateUser(
          uid: uid,
          email: user.email ?? '',
          displayName: user.displayName,
          photoURL: user.photoURL,
        ).timeout(
          const Duration(seconds: 1),
          onTimeout: () {
            debugPrint('‚ö†Ô∏è User creation timeout - using fallback');
            throw TimeoutException('User creation timeout');
          },
        );

        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
        final data = await UserService.getUserData(
          uid,
        ).timeout(const Duration(milliseconds: 800), onTimeout: () => null);
        userData.value = data;
        debugPrint('‚úÖ New user data created and loaded');
      }
    } catch (e) {
      debugPrint('‚ùå Failed to create user data: $e');
      throw e;
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firestore
  Future<void> _createUserData(String uid) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        await UserService.createOrUpdateUser(
          uid: uid,
          email: user.email ?? '',
          displayName: user.displayName,
          photoURL: user.photoURL,
        ).timeout(
          const Duration(seconds: 1),
          onTimeout: () {
            debugPrint('‚ö†Ô∏è User creation timeout - using fallback');
            throw TimeoutException('User creation timeout');
          },
        );

        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
        final data = await UserService.getUserData(uid).timeout(
          const Duration(milliseconds: 800),
          onTimeout: () => null,
        );
        userData.value = data;
        debugPrint('‚úÖ New user data created and loaded');
      }
    } catch (e) {
      debugPrint('‚ùå Failed to create user data: $e');
      throw e;
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å Firebase Auth
  Future<Map<String, dynamic>> _createFallbackUserData(String uid) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) throw Exception('No authenticated user');

    return {
      'uid': uid,
      'email': user.email ?? '',
      'displayName': user.displayName ?? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
      'photoURL': user.photoURL,
      'role': 'user',
      'createdAt': DateTime.now().toIso8601String(),
      'lastLogin': DateTime.now().toIso8601String(),
      'isActive': true,
    };
  }

  /// ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  Future<void> refreshUserData() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      try {
        await _loadUserData(user.uid).timeout(
          const Duration(seconds: 2),
          onTimeout: () {
            debugPrint('‚ö†Ô∏è Refresh user data timeout - stopping loading');
            isLoadingUser.value = false;
            return;
          },
        );
      } catch (e) {
        debugPrint('‚ùå Refresh user data failed: $e');
        // ‡∏´‡∏¢‡∏∏‡∏î loading state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error
        isLoadingUser.value = false;
      }
    }
  }

  /// ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ logout
  void clearAllData() {
    _timeoutTimer?.cancel();
    isLoadingUser.value = false;
    userData.value = null;
    error.value = null;
    debugPrint('üßπ All auth data cleared');
  }

  /// ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£ loading ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login/logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
  void stopLoadingAndClearData() {
    _timeoutTimer?.cancel();
    isLoadingUser.value = false;
    userData.value = null;
    error.value = null;
    debugPrint('üîÑ Loading stopped and data cleared after auth state change');
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get isAdmin {
    final data = userData.value;
    if (data == null) return false;

    final email = data['email'] ?? '';
    return data['role'] == 'admin' || email == 'techwiseofficialth@gmail.com';
  }

  /// ‡∏õ‡∏¥‡∏î service ‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å listeners
  void dispose() {
    _authSubscription?.cancel();
    _timeoutTimer?.cancel();
    isLoadingUser.dispose();
    userData.dispose();
    error.dispose();
  }
}
