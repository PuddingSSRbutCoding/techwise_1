import 'package:flutter/foundation.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'user_service.dart';
import 'dart:async';

/// Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ authentication state ‡πÅ‡∏•‡∏∞ user data
class AuthStateService {
  static AuthStateService? _instance;
  static AuthStateService get instance => _instance ??= AuthStateService._();
  
  AuthStateService._();
  
  final ValueNotifier<bool> isLoadingUser = ValueNotifier(false);
  final ValueNotifier<Map<String, dynamic>?> userData = ValueNotifier(null);
  final ValueNotifier<String?> error = ValueNotifier(null);
  
  StreamSubscription<User?>? _authSubscription;
  Timer? _timeoutTimer;
  
  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô service ‡πÅ‡∏•‡∏∞ listen ‡∏ï‡πà‡∏≠ auth state changes
  void initialize() {
    _authSubscription = FirebaseAuth.instance.authStateChanges().listen(
      _handleAuthStateChange,
      onError: (error) {
        debugPrint('Auth state error: $error');
        this.error.value = error.toString();
      },
    );
  }
  
  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á auth state
  void _handleAuthStateChange(User? user) async {
    if (user == null) {
      // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      _timeoutTimer?.cancel();
      isLoadingUser.value = false;
      userData.value = null;
      error.value = null;
      debugPrint('üîÑ Auth state cleared - user signed out');
      return;
    }
    
    // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö - ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å UI)
    debugPrint('üîÑ Auth state changed - loading user data for: ${user.email}');
    // ‡πÉ‡∏ä‡πâ unawaited ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Å UI
    _loadUserData(user.uid);
  }
  
  /// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
  Future<void> _loadUserData(String uid) async {
    isLoadingUser.value = true;
    error.value = null;
    
    // ‡∏•‡∏î timeout ‡πÄ‡∏õ‡πá‡∏ô 8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ responsive ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    _timeoutTimer = Timer(const Duration(seconds: 8), () {
      if (isLoadingUser.value) {
        debugPrint('‚ö†Ô∏è User data loading timeout');
        isLoadingUser.value = false;
        error.value = '‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
      }
    });
    
    try {
      // ‡πÉ‡∏ä‡πâ timeout ‡πÉ‡∏ô UserService call ‡∏î‡πâ‡∏ß‡∏¢
      final data = await UserService.getUserData(uid).timeout(
        const Duration(seconds: 6),
        onTimeout: () {
          debugPrint('‚ö†Ô∏è UserService.getUserData timeout');
          return null;
        },
      );
      
      _timeoutTimer?.cancel();
      
      if (data != null) {
        userData.value = data;
        debugPrint('‚úÖ User data loaded successfully');
      } else {
        // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        debugPrint('‚ö†Ô∏è No user data found, creating new user...');
        try {
          await _createUserData(uid);
        } catch (createError) {
          debugPrint('‚ùå Failed to create user data: $createError');
          // ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase Auth ‡πÅ‡∏ó‡∏ô
          userData.value = await _createFallbackUserData(uid);
        }
      }
      
      isLoadingUser.value = false;
      error.value = null;
    } catch (e) {
      _timeoutTimer?.cancel();
      debugPrint('‚ùå Failed to load user data: $e');
      
      // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase Auth ‡πÅ‡∏ó‡∏ô
      try {
        userData.value = await _createFallbackUserData(uid);
        isLoadingUser.value = false;
        error.value = null;
        debugPrint('‚úÖ Using fallback user data');
      } catch (fallbackError) {
        isLoadingUser.value = false;
        error.value = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ';
        debugPrint('‚ùå Fallback user data failed: $fallbackError');
      }
    }
  }
  
  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firestore
  Future<void> _createUserData(String uid) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        await UserService.createOrUpdateUser(
          uid: uid,
          email: user.email ?? '',
          displayName: user.displayName,
          photoURL: user.photoURL,
        );
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
        final data = await UserService.getUserData(uid);
        userData.value = data;
        debugPrint('‚úÖ New user data created and loaded');
      }
    } catch (e) {
      debugPrint('‚ùå Failed to create user data: $e');
      throw e;
    }
  }
  
  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å Firebase Auth
  Future<Map<String, dynamic>> _createFallbackUserData(String uid) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) throw Exception('No authenticated user');
    
    return {
      'uid': uid,
      'email': user.email ?? '',
      'displayName': user.displayName ?? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
      'photoURL': user.photoURL,
      'role': 'user',
      'createdAt': DateTime.now().toIso8601String(),
      'lastLogin': DateTime.now().toIso8601String(),
      'isActive': true,
    };
  }
  
  /// ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  Future<void> refreshUserData() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      await _loadUserData(user.uid);
    }
  }
  
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get isAdmin {
    final data = userData.value;
    if (data == null) return false;
    
    final email = data['email'] ?? '';
    return data['role'] == 'admin' || email == 'techwiseofficialth@gmail.com';
  }
  
  /// ‡∏õ‡∏¥‡∏î service ‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å listeners
  void dispose() {
    _authSubscription?.cancel();
    _timeoutTimer?.cancel();
    isLoadingUser.dispose();
    userData.dispose();
    error.dispose();
  }
}
