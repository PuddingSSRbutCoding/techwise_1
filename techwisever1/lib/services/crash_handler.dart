import 'package:flutter/foundation.dart';
import 'dart:developer' as developer;
import 'app_state_service.dart';

/// Crash handler ‡πÅ‡∏•‡∏∞ recovery service
class CrashHandler {
  
  /// Initialize crash handling
  static void initialize() {
    // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ debug mode ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (kDebugMode) {
      FlutterError.onError = (FlutterErrorDetails details) {
        FlutterError.presentError(details);
        _logError(details.toString(), 'FlutterError');
      };
    }
  }

  /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° crash count
  static void _logError(String error, String context) async {
    try {
      developer.log(
        'CRASH: $error',
        name: 'CrashHandler',
        error: error,
      );
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô app state
      await AppStateService.saveLastError(error, context);
      await AppStateService.incrementCrashCount();
      
      debugPrint('üí• Crash logged: $context');
    } catch (e) {
      debugPrint('‚ùå Error logging crash: $e');
    }
  }

  /// Handle app recovery
  static Future<bool> handleRecovery() async {
    try {
      final crashCount = await AppStateService.getCrashCount();
      final shouldRecover = await AppStateService.shouldShowRecoveryOptions();
      
      if (shouldRecover && crashCount > 2) {
        debugPrint('üîÑ Initiating app recovery...');
        
        // Clear problematic state
        await AppStateService.clearLastError();
        
        // ‡∏•‡∏î crash count
        await AppStateService.resetCrashCount();
        
        debugPrint('‚úÖ App recovery completed');
        return true;
      }
      
      return false;
    } catch (e) {
      debugPrint('‚ùå Recovery failed: $e');
      return false;
    }
  }

  /// Check if app is in stable state
  static Future<bool> isAppStable() async {
    try {
      final stats = await AppStateService.getAppStats();
      final crashCount = stats['crashCount'] as int;
      final loginAttempts = stats['loginAttempts'] as int;
      
      // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ stable ‡∏ñ‡πâ‡∏≤ crash ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÅ‡∏•‡∏∞ login attempts ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 5
      return crashCount < 2 && loginAttempts < 5;
    } catch (e) {
      debugPrint('‚ùå Error checking app stability: $e');
      return false;
    }
  }

  /// Reset app to clean state
  static Future<void> resetAppState() async {
    try {
      await AppStateService.clearAllAppState();
      debugPrint('üßπ App state reset completed');
    } catch (e) {
      debugPrint('‚ùå Error resetting app state: $e');
    }
  }
}
