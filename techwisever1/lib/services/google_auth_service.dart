import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:flutter/foundation.dart';
import 'package:techwisever1/services/auth_state_service.dart';

/// Google Authentication Service - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
class GoogleAuthService {
  
  static final GoogleSignIn _googleSignIn = GoogleSignIn(
    scopes: ['email', 'profile'],
  );

  /// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Google (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢)
  static Future<UserCredential?> signInWithGoogle() async {
    try {
      debugPrint('üöÄ Starting Google Sign-In...');
      
      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Google
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
      
      if (googleUser == null) {
        debugPrint('‚ùå User cancelled Google Sign-In');
        return null;
      }

      debugPrint('‚úÖ Google user selected: ${googleUser.email}');

      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö authentication tokens
      final GoogleSignInAuthentication googleAuth = await googleUser.authentication;

      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á Firebase credential
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Firebase
      debugPrint('üî• Signing in to Firebase...');
      final UserCredential userCredential = await FirebaseAuth.instance.signInWithCredential(credential);
      
      debugPrint('üéâ Google Sign-In successful: ${userCredential.user?.email}');
      
      // ‡∏´‡∏¢‡∏∏‡∏î loading state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      AuthStateService.instance.isLoadingUser.value = false;
      
      return userCredential;
    } catch (e) {
      debugPrint('‚ùå Google Sign-In Error: $e');
      
      // ‡∏´‡∏¢‡∏∏‡∏î loading state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error
      AuthStateService.instance.isLoadingUser.value = false;
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API Error 10
      if (e.toString().contains('ApiException: 10')) {
        debugPrint('üí° ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SHA-1 fingerprint ‡πÉ‡∏ô Firebase Console');
        debugPrint('SHA-1: 89:E6:F6:9F:24:B5:3C:E2:CB:88:91:BD:8F:C9:E5:01:B8:58:C9:47');
      }
      
      rethrow;
    }
  }



  /// ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Google (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)
  static Future<void> signOut() async {
    try {
      debugPrint('üö™ Starting logout process...');
      
      // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Firebase Auth ‡∏Å‡πà‡∏≠‡∏ô (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î) ‡∏î‡πâ‡∏ß‡∏¢ timeout ‡∏™‡∏±‡πâ‡∏ô
      await FirebaseAuth.instance.signOut().timeout(
        const Duration(seconds: 2),
        onTimeout: () {
          debugPrint('‚ö†Ô∏è Firebase signOut timeout - continuing anyway');
          return null;
        },
      );
      
      debugPrint('‚úÖ Firebase logout completed');
      
      // ‡∏´‡∏¢‡∏∏‡∏î loading state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å logout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      AuthStateService.instance.isLoadingUser.value = false;
      
      // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Google Sign-In ‡πÅ‡∏ö‡∏ö parallel (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏Å‡∏±‡∏ô)
      final googleFutures = [
        _googleSignIn.signOut().catchError((error) {
          debugPrint('‚ö†Ô∏è Google signOut warning (ignorable): $error');
          return null;
        }),
        _googleSignIn.disconnect().catchError((error) {
          debugPrint('‚ö†Ô∏è Disconnect warning (ignorable): $error');
          return null;
        }),
      ];
      
      // ‡∏£‡∏≠ Google operations ‡πÅ‡∏ï‡πà‡∏°‡∏µ timeout ‡∏™‡∏±‡πâ‡∏ô
      await Future.wait(googleFutures).timeout(
        const Duration(seconds: 3),
        onTimeout: () {
          debugPrint('‚ö†Ô∏è Google cleanup timeout - continuing anyway');
          return [];
        },
      );
      
      debugPrint('‚úÖ Logout process completed');
      
    } catch (e) {
      debugPrint('‚ùå Sign Out Error: $e');
      
      // ‡∏´‡∏¢‡∏∏‡∏î loading state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error
      AuthStateService.instance.isLoadingUser.value = false;
      
      // Emergency logout - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Firebase Auth (‡πÑ‡∏°‡πà throw error)
      try {
        debugPrint('üîÑ Attempting emergency Firebase logout...');
        await FirebaseAuth.instance.signOut().timeout(const Duration(seconds: 2));
        debugPrint('‚úÖ Emergency logout successful');
      } catch (emergencyError) {
        debugPrint('‚ùå Emergency logout failed: $emergencyError');
        // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏Ñ‡πâ‡∏≤‡∏á
      }
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ login ‡∏î‡πâ‡∏ß‡∏¢ Google ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isGoogleUser(User? user) {
    return user?.providerData.any((element) => element.providerId == 'google.com') ?? false;
  }
} 